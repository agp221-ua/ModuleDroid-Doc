{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>aqui iria una explicacion de que es y que quiere hacer</p>"},{"location":"about/","title":"About","text":""},{"location":"configurator/","title":"Configurator","text":""},{"location":"navigator/","title":"Navigator","text":""},{"location":"kernel/kernel/","title":"ModuleDroid Kernel","text":""},{"location":"kernel/kernel/#introduction","title":"Introduction","text":"<p> La documentacion del kernel de ModuleDroid esta pensada para aquellos que desean desarrollar modulos o plugins para el framework o quieren saber mas sobre el funcionamiento del mismo. No es necesario conocer el funcionamiento interno del kernel para utilizar el framework.</p> <p>ModuleDroid esta basado en un sistema de modulos y plugins, de forma que cada modulo es independiente del resto, y puede ser a\u00f1adido o eliminado del sistema en cualquier momento. Para ello, el sistema esta compuesto por un nucleo (kernel) que se encarga de gestionar los modulos y plugins que se ejecutan en el sistema, asi como de gestionar los eventos que se producen en \u00e9l. </p> <p>Internamente, el kernel esta compuesto a su vez por un conjunto de componentes que se encargan de gestionar los diferentes aspectos del sistema, de forma que si un modulo necesita interactuar con un aspecto del sistema, lo hace a traves del kernel y este se encarga de gestionar la interaccion con el componente correspondiente.</p> <p></p> <pre><code>flowchart TB\n    subgraph k[KERNEL]\n        direction TB\n        f(Facade)\n        subgraph c[CORE]\n            c1(Core)\n        end\n        subgraph sc[SUBCOMPONENTS]\n            sc1(Current Context Manager)\n            sc2(Activity Lifecycle)\n            sc3(Kernel Configurator)\n        end\n    end\n\n    subgraph p[Plugins]\n        direction LR\n        pa(Plugin 1) \n        pb(Plugin 2)\n        pc(Plugin N)\n    end\n    p --&gt; f\n\n    f &lt;-.-&gt; sc\n    c &lt;-.-&gt; sc\n    k ---&gt; System\n</code></pre>"},{"location":"kernel/kernel/#plugins","title":"Plugins","text":"<p>Los plugins son modulos que se ejecutan de forma independiente al kernel, de forma que pueden ser a\u00f1adidos o eliminados de la aplicacion en cualquier momento sin afectar al resto de modulos. </p> <p>Para ello, los plugins se comunican con el kernel a traves del componente Facade, de  forma que el plugin se absrae de la implementacion interna del kernel y solo se comunica con el nucleo a traves de una interfaz.</p>"},{"location":"kernel/kernel/#kernel","title":"Kernel","text":"<p>El kernel es el nucleo del framework, por lo que es el encargado de gestionar los modulos o plugins que se ejecutan en el sistema, asi como de gestionar los eventos que se producen en \u00e9l. Internamente, el kernel esta compuesto a su vez por un conjunto de componentes que se encargan de gestionar los diferentes aspectos del sistema, de forma que si un modulo necesita interactuar con un aspecto del sistema, lo hace a traves del kernel y este se encarga de gestionar la interaccion con el componente correspondiente.</p> <p> El kernel es un componente que se ejecuta en el hilo principal de la aplicacion, por lo que no se debe ejecutar codigo bloqueante en \u00e9l.</p> <p> Acceder a algun aspecto del sistema sorteando el kernel puede provocar comportamientos inesperados en el sistema, por lo que se recomienda no hacerlo. Si se necesita acceder a algun aspecto del sistema no implementado en el kernel, se recomienda notificar al equipo de desarrollo para que baraje la posibilidad de a\u00f1adirlo al kernel o otorgen alguna solucion alternativa.</p>"},{"location":"kernel/kernel/#componentes","title":"Componentes","text":"<p>Como se ha comentado anteriormente, el kernel esta compuesto por un conjunto de componentes que se encargan de gestionar y facilitar el acceso los diferentes aspectos del sistema. </p> <p>A continuaci\u00f3n detallamos los componentes que componen el kernel:</p> <p>Facade</p><p>Componente encargado de gestionar las llamadas de los modulos</p> <p>Core</p><p>Componente encargado de la comunicacion entre los subcomponentes del kernel</p> <p>Current Context Manager</p><p>Subcomponente encargado de gestionar el contexto actual de la aplicacion</p> <p>Activity Lifecycle</p><p>Subcomponente encargado de gestionar el ciclo de vida de las activities</p> <p>Kernel Configurator</p><p>Subcomponente encargado de gestionar la configuracion del kernel</p>"},{"location":"kernel/components/core/","title":"Kernel Core","text":""},{"location":"kernel/components/core/#introduction","title":"Introduction","text":"<p>Core es uno de los componentes principales que, a diferencia de los subcomponentes, no se centra ni en la obtencion de resultados ni el el trato de ellos, sino que se encarga de gestionar aquellos datos que son globales al framework y por lo tanto no pueden ser privatizados en un componente especifico. Esta funcionalidad puede ser util para ciertas acciones que necesitan datos que no pertenecen al dominio de cierto subcomponente en concreto pero sean necesarios para realizar dicha acci\u00f3n. Es por ello que, para evitar insertar dependencias innecesarias en los subcomponentes, se ha creado Core como bus interno de datos globales.</p> <p>Por ejemplo, el subcomponente encargado de ofrecer la Activty actual, no debe conocer el sistema de obtencion de la Activity actual ni deber\u00eda saber quien es el encargado de ello. Ahi entra en juego Core, ya que es el encargado de otorgar esos datos a los subcomponentes que lo necesiten, abstrayendolos de la complejidad de la obtencion de dichos datos.</p> <p>Nota</p> <p>Core no conoce todos los subcomponentes del kernel, tan solo se centra en la conexion de datos entre ellos.</p>"},{"location":"kernel/components/core/#estructura","title":"Estructura","text":"<pre><code>    flowchart TB\n        subgraph k[KERNEL]\n            direction TB\n            subgraph c[SUBCOMPONENTS]\n                c1(Subcomponent 1)\n                c2(Subcomponent 2)\n                c3(Subcomponent N)\n            end\n            direction TB\n            core(Core)\n        end\n        k --&gt; System\n        c1 &lt;-.-&gt; core\n        c2 &lt;-.-&gt; core\n        c3 &lt;-.-&gt; core\n</code></pre>"},{"location":"kernel/components/facade_kernel/","title":"Kernel Facade","text":"<p>El Kernel Facade es el componente que se encarga de gestionar las llamadas de los modulos al kernel, y de gestionar las respuestas del kernel a los modulos. Basicamente es un intermediario entre los modulos y el kernel, que se encarga de que la comunicacion entre ambos sea correcta y lo mas sencilla posible de cara a los modulos y el usuario final.</p>"},{"location":"kernel/components/facade_kernel/#funcionamiento","title":"Funcionamiento","text":"<p>El funcionamiento del Kernel Facade es muy sencillo. Basicamente se encarga de gestionar las llamadas de los modulos a los componentes del kernel y viceversa, de forma que los modulos no tengan que preocuparse de saber como se comunican con el kernel. Para ello, el Kernel Facade expone una serie de metodos que los modulos pueden utilizar para comunicarse con los componentes internos, ya que la principal funcion del Kernel Facade es la de abstraer a los modulos de la complejidad de la comunicacion con los componentes del kernel y  evitar la necesidad de saber y depender de como funciona internamente el framework.</p>"},{"location":"kernel/components/facade_kernel/#estructura","title":"Estructura","text":"<pre><code>    flowchart TB\n        subgraph p[Plugins]\n            direction LR\n            pa(Plugin 1) \n            pb(Plugin 2)\n            pc(Plugin N)\n        end\n\n        subgraph f[Facade]\n            f1(Facade)\n            subgraph sf[Subfacade]\n                sf1(Subfacade 1)\n                sf2(Subfacade 2)\n                sf3(Subfacade N)\n            end\n        end\n        subgraph sc[Secondary Components]\n            direction TB\n            sc1(Subcomponent 1)\n            sc2(Subcomponent 2)\n            sc3(Subcomponent N)\n        end\n\n        p --&gt; f\n        f1 --&gt; sf1\n        f1 --&gt; sf2\n        f1 --&gt; sf3\n        sf1 --&gt; sc1\n        sf2 --&gt; sc2\n        sf3 --&gt; sc3\n</code></pre> <p>Info</p> <p>Se puede observar que el Kernel Facade esta compuesto por un conjunto de subfacade, los cuales se encargan de gestionar las llamadas a los componentes internos del kernel. Esta subdivision se debe a que el Kernel Facade es un componente muy complejo, por lo que se ha decidido dividirlo en subfacade para facilitar su comprension y mantenimiento.</p>"},{"location":"kernel/components/subcomponents/activity_lifecycle/","title":"Activity Lifecycle","text":"<p>Este componente se encarga de gestionar el ciclo de vida de las activities, de forma que siguiendo una estructura de suscripciones, al ocurrir un evento de ciclo de vida, se notifica a los modulos que esten suscritos a dicho evento.</p>"},{"location":"kernel/components/subcomponents/intent_manager/","title":"Intent Manager","text":""},{"location":"kernel/components/subcomponents/kernel_configurator/","title":"Kernel Configurator","text":""}]}